import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'org.jetbrains.kotlin.android'
}

def apikeyPropertiesFile = rootProject.file("config.properties")
def apikeyProperties = new Properties()

if (apikeyPropertiesFile.exists()) {
    apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
}

def versionPropsFile = rootProject.file('version.properties')
def versionProps = new Properties()
versionProps.load(new FileInputStream(versionPropsFile))

android {
    namespace 'com.raylabs.doggie'
    compileSdkVersion 36
    defaultConfig {
        applicationId "com.raylabs.doggie"
        minSdkVersion 23
        targetSdkVersion 36
        versionCode versionProps['VERSION_CODE'].toInteger()
        versionName versionProps['VERSION_NAME']
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(apikeyProperties["MYAPP_RELEASE_KEYSTORE_FILE"])
            storePassword apikeyProperties["MYAPP_RELEASE_KEYSTORE_PASSWORD"]
            keyAlias apikeyProperties["MYAPP_RELEASE_KEY_ALIAS"]
            keyPassword apikeyProperties["MYAPP_RELEASE_KEY_PASSWORD"]
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue("string", "ads_application_id", apikeyProperties["ADMOB_ID_PROD"])
            resValue("string", "admob_banner_id", apikeyProperties["ADMOB_ID_BANNER_PROD"])
        }

        debug {
            debuggable true
            minifyEnabled false
            resValue("string", "ads_application_id", apikeyProperties["ADMOB_ID_DEV"])
            resValue("string", "admob_banner_id", apikeyProperties["ADMOB_ID_BANNER_DEV"])
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility 17
        targetCompatibility 17
    }

    kotlin {
        jvmToolchain(17)

        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// Ensure unit tests always produce coverage data (CI friendly)
tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.register("jacocoTestReport", JacocoReport) {
    dependsOn "testDebugUnitTest"

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // === Pola exclude: generated + UI layer ===
    def excludes = [
            // generated/boilerplate
            '**/R.class', '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/androidx/**/*.*',

            // UI yang mau kamu singkirkan dari coverage
            '**/*Activity.*', '**/*Activity$*.*',
            '**/*Fragment.*', '**/*Fragment$*.*',
            '**/*Adapter.*',  '**/*Adapter$*.*',
            '**/com/raylabs/doggie/ui/**',
            '**/com/raylabs/doggie/databinding/**',
            '**/com/raylabs/doggie/data/source/local/room/**'
    ]

    // === Cari file .class di seluruh buildDir (lebih toleran untuk variasi AGP/Gradle di CI) ===
    def b = layout.buildDirectory.get().asFile

    // 1) Semua direktori kelas yang umum untuk Kotlin/Java debug
    def classDirTrees = [
            fileTree(dir: new File(b, 'tmp/kotlin-classes/debug'), exclude: excludes),
            fileTree(dir: new File(b, 'intermediates/javac/debug'), exclude: excludes),
            fileTree(dir: new File(b, 'intermediates/javac/debug/classes'), exclude: excludes),
            fileTree(dir: new File(b, 'intermediates/classes/debug'), exclude: excludes)
    ].findAll { it.dir.exists() }

    // 2) Tambahan wildcard: sapu bersih semua *.class di folder debug
    def wildcardClassTrees = fileTree(dir: b, include: [
            'tmp/kotlin-classes/debug/**/*.class',
            'intermediates/**/debug/**/*.class'
    ]).matching { exclude(excludes) }

    // 3) Kelas di dalam classes.jar (beberapa AGP/CI menaruh di jar)
    def classesJarFiles = fileTree(dir: b, include: ['**/classes.jar']).files
    def jarClassTrees = classesJarFiles.collect { jar ->
        return zipTree(jar).matching { exclude(excludes) }
    }

    def allTrees = []
    allTrees.addAll(classDirTrees)
    if (!wildcardClassTrees.isEmpty()) allTrees.add(wildcardClassTrees)
    allTrees.addAll(jarClassTrees)

    classDirectories.setFrom files(allTrees)

    // === Collect ALL execution data under buildDir (exec/ec) ===
    def execFiles = fileTree(dir: b, include: [
            '**/*.exec',
            '**/*.ec'
    ])
    executionData.setFrom files(execFiles)

    // Debug log
    doFirst {
        println "[jacoco] buildDir = ${b.absolutePath}"
        println "[jacoco] candidateDirs:"
        candidateDirs.each { println " - DIR: ${it.absolutePath} (exists=${it.exists()})" }
        println "[jacoco] candidateJars:"
        candidateJars.each { println " - JAR: ${it.absolutePath} (exists=${it.exists()})" }
        println "[jacoco] wildcard debug class scan enabled"
        println "[jacoco] classes.jar found: ${classesJarFiles.size()}"
        def total = 0
        classTrees.each { ft -> total += ft.files.size() }
        println "[jacoco] class files included = ${total}"
        println "[jacoco] executionData files:"
        execFiles.each { println " - EXEC: ${it.absolutePath} (exists=${it.exists()})" }
    }
}

jacoco { toolVersion = "0.8.11" }

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation "androidx.activity:activity-ktx:1.11.0"


    //Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.mockito:mockito-core:5.20.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:6.0.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2"

    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'

    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //network
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'
    implementation "com.squareup.okhttp3:okhttp:5.1.0"
    implementation "com.squareup.okhttp3:logging-interceptor:5.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.4"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.9.4"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.9.4"

    //paging3
    implementation "androidx.paging:paging-runtime-ktx:3.3.6"
    testImplementation "androidx.paging:paging-common-ktx:3.3.6"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2"

    //WorkManager
    testImplementation "androidx.work:work-testing:2.10.5"
    implementation "androidx.work:work-runtime-ktx:2.10.5"

    //image
    implementation 'com.github.bumptech.glide:glide:5.0.5'
    annotationProcessor 'com.github.bumptech.glide:compiler:5.0.5'

    //room
    implementation "androidx.room:room-runtime:2.8.1"
    implementation "androidx.room:room-paging:2.8.1"
    annotationProcessor "androidx.room:room-compiler:2.8.1"

    implementation platform('com.google.firebase:firebase-bom:34.3.0')
    implementation 'com.google.firebase:firebase-analytics'     // opsional
    implementation 'com.google.firebase:firebase-crashlytics'   // opsional

    implementation 'com.google.android.gms:play-services-ads:24.6.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.2.0'
    implementation "org.jetbrains.kotlin:kotlin-test:2.2.0"
}